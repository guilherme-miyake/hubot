import HttpClient from "scoped-http-client";
import Middleware from "./middleware";
declare class Robot {
    adapterPath: any;
    name: any;
    events: any;
    brain: any;
    alias: any;
    adapter: any;
    datastore: any;
    Response: any;
    listeners: any[];
    commands: any[];
    middleware: {
        listener: any;
        response: any;
        receive: any;
    };
    logger: any;
    pingIntervalId: any;
    globalHttpOptions: {};
    adapterName: any;
    errorHandlers: any[];
    server: any;
    router: any;
    version: any;
    constructor(adapterPath: string, adapter: string, httpd: boolean, name: string, alias?: string | boolean);
    onUncaughtException(err: any): void;
    listen(matcher: any, options: object, callback: CallableFunction): void;
    hear(regex: RegExp, options: object, callback?: CallableFunction): void;
    respond(regex: RegExp, options: object, callback: CallableFunction): void;
    respondPattern(regex: RegExp): RegExp;
    enter(options: object, callback: CallableFunction): void;
    leave(options: object, callback: CallableFunction): void;
    topic(options: object, callback: CallableFunction): void;
    error(callback: CallableFunction): void;
    invokeErrorHandlers(error: any, res: any): void;
    catchAll(options: object | CallableFunction, callback: CallableFunction): void;
    listenerMiddleware(middleware: CallableFunction): void;
    responseMiddleware(middleware: Middleware): void;
    receiveMiddleware(middleware: Middleware): void;
    receive(message: any, cb: CallableFunction): void;
    processListeners(context: any, done: CallableFunction): void;
    loadFile(filepath: string, filename: any): void;
    load(path: string): void;
    loadHubotScripts(path: string, scripts: any): void;
    loadExternalScripts(packages: string[] | object): void;
    setupExpress(): void;
    setupNullRouter(): void;
    loadAdapter(adapter: string): void;
    helpCommands(): any[];
    parseHelp(path: string): void;
    send(envelope: any, ...strings: string[]): void;
    reply(envelope: any, ...strings: string[]): void;
    messageRoom(room: any, ...strings: any): void;
    on(event: any, ...args: any[]): void;
    emit(event: any, ...args: any[]): void;
    run(): void;
    shutdown(): void;
    parseVersion(): any;
    http(url: string, options?: {}): HttpClient.ScopedClient;
}
export default Robot;
//# sourceMappingURL=robot.d.ts.map